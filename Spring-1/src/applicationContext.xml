<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<!-- 
		配置Bean
		class: Bean的全类名，通过反射的方式在IOC容器中创建Bean，所以要求Bean中必须要有无参数的构造器
		id: 标识容器中的bean。  id唯一
	-->
	<bean id="helloWorld" class="com.darren.spring.beans.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>
	
	<!-- 通过构造方法来配置bean的属性 -->
	<bean id="car" class="com.darren.spring.beans.Car">
		<constructor-arg  value="Audi" index="0"></constructor-arg>
		<constructor-arg  value="ShangHai" index="1"></constructor-arg>
		<constructor-arg  value="300000" type="double" index="2"></constructor-arg>
	</bean>
	
	<!-- 使用构造器注入属性值可以指定参数的位置和参数的类型！以区分重载的构造器 -->
	<bean id="car2" class="com.darren.spring.beans.Car">
		<constructor-arg  value="Baoma" name="brand" type="java.lang.String" index="0"></constructor-arg>
		<constructor-arg  name="corp" type="java.lang.String" index="1">
			<value><![CDATA[<ShangHai^>]]></value>
		</constructor-arg>
		<constructor-arg  value="240" name="maxSpeed" type="int" index="2"></constructor-arg>
	</bean>
	
	<bean id="person" class="com.darren.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<!-- 引用外包bean -->
		<!--<property name="car" ref="car2"></property>-->
		<!-- 内部bean，不能被外部引用，只能在内部使用 --> 
		<property name="car">
			<bean class="com.darren.spring.beans.Car">
				<constructor-arg  value="Ford" index="0"></constructor-arg>
				<constructor-arg  value="Changan" index="1"></constructor-arg>
				<constructor-arg  value="200000" type="double" index="2"></constructor-arg>
			</bean>
		</property>
		<property name="car.maxSpeed" value="260"></property>
	</bean>
	
	<bean id="person2" class="com.darren.spring.beans.Person">
		<constructor-arg  value="Jerry" index="0"></constructor-arg>
		<constructor-arg  value="25" index="1"></constructor-arg>
		<!--<constructor-arg  ref="car" index="2"></constructor-arg>-->
		<!-- 测试赋值null -->
		<!--<constructor-arg index="2"><null/></constructor-arg>-->
		<constructor-arg  ref="car" index="2"></constructor-arg>
		<!-- 为级联属性赋值 ，注意：属性需要先初始化后才可以为级联属性赋值。否则会有异常，和Struts2不同-->
		<property name="car.maxSpeed" value="250"></property>
	</bean>
	
	<!-- 测试如何配置集合属性 -->
	<bean id="person3" class="com.darren.spring.beans.collection.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="27"></property>
		<property name="cars">
			<list>
				<ref bean="car"></ref>
				<ref bean="car2"></ref>
			</list>
		</property>
	</bean>
	
	<!-- 配置Map属性值 -->
	<bean id="newPerson" class="com.darren.spring.beans.collection.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="age" value="28"></property>
		<property name="cars">
			<!-- 使用map节点及map的entry子节点配置Map类型的成员变量 -->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置Properties属性值 -->
	<bean id="dataSource" class="com.darren.spring.beans.collection.DataSource">
		<property name="properties">
			<!-- 使用props和prop子节点来为properties属性赋值 -->
			<props>
				<prop key="user">root</prop>
				<prop key="password">123456</prop>
				<prop key="jdbcUrl">jdbc:mysql://test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置单例的集合bean，以供多个bean进行引用，需要导入util命名空间 -->
	<util:list id="cars">
		<ref bean="car"></ref>
		<ref bean="car2"></ref>
	</util:list>
	
	<bean id="person4" class="com.darren.spring.beans.collection.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过p命名空间为bean的属性赋值，需要先导入p命名空间，相对于传统的配置方式更加简洁 -->
	<bean id="person5" class="com.darren.spring.beans.collection.Person" p:age="30" p:name="Queen" p:cars-ref="cars"></bean>
</beans>
